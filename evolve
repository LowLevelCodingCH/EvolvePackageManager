#!/bin/python3.10

import os
import shutil
import sys
import psutil

def get_free_disk_space():
    partitions = psutil.disk_partitions()
    for partition in partitions:
        if partition.mountpoint == '/':
            disk_usage = psutil.disk_usage(partition.mountpoint)
            free_space_gb = disk_usage.free / (1024 ** 3)  # Convert bytes to megabytes
            return free_space_gb

def extract_package(package_file, outdir):
    print(f"\033[1m\033[1;33mExtracting Package: {package_file} into {outdir}\033[0m")
    os.makedirs(outdir, exist_ok=True)
    os.system(f"tar -xzvf {package_file} -C {outdir} --strip-components=1 > /dev/null")
    return package_file.split('.')[0]

def compile_package(package_dir):
    print(f"\033[1m\033[1;33m\033[1m\033[1;33mEvolving Package: {package_dir}\033[0m")
    # Code to compile package, e.g., run 'make packcompile'
    os.system(f"cd {package_dir} && make > /dev/null && cd ..")

def copy_binary(binary_path, destination_path):
    print(f"\033[1m\033[0;32mInstalling Binary: {binary_path} -> {destination_path}\033[0m")
    os.system(f"sudo cp {binary_path} {destination_path}")

def cleanup(package_dir):
    print(f"\033[1m\033[0;31mRemoving Package Directory: {package_dir}\033[0m")
    shutil.rmtree(package_dir)

def install_package(sarg2: str):
    try:
        # Download package
        package_file = sarg2 ## download_package(package_url, download_dir)
        
        # Extract package
        package_dir = extract_package(package_file, sarg2.split(".")[0]) 
        print(f"\033[1m\033[1;33mFree disk space: {get_free_disk_space():.2f}GB\033[0m")
        a = input("Do you wish to continue? [Y/N]: ")
        if(a.upper() == "Y"):
            # Compile package
            compile_package(package_dir)
            # Read path from file and copy binary to specified location
            with open(f"{sarg2.split('.')[0]}/Path", "r") as f:
                frs = f.read().split("\n")
                extpath = frs[0]
                binaryfiles = frs[1].split(" ")
                i = 1
                for binaryf in binaryfiles:
                    copy_binary(package_dir + "/" + binaryf, extpath)
                    print(f"\033[1m\033[1;33mEvolved: {binaryf} ({i}/{len(binaryfiles)})\033[0m")
                    i += 1
                cleanup(package_dir)
                print(f"INSTALLED: {binaryfiles} FROM {package_dir}")
            print("\033[1m\033[0;32mPackage installed successfully!\033[0m")
        else:
            print("Aborted...")
    except Exception as e:
        print(f"\033[1m\033[0;31mError installing package: {e}\033[0m")
def remove_package(rbin: str):
    try:
        print(f"\033[1m\033[1;33mPackage to remove: {rbin}\033[0m")
        print(f"\033[1m\033[1;33mFree disk space: {get_free_disk_space():.2f}GB\033[0m")
        a = input("Do you wish to continue? [Y/N]: ")
        if(a.upper() == "Y"):
            k = extract_package(rbin, rbin.split(".")[0])
            ka = rbin.split(".")[0]
            with open(ka + "/Path", "r") as fa:
                i = 1
                d = fa.read().split("\n")[1].split(" ")
                for dd in d:
                    os.system(f"sudo rm -rf /bin/{dd}")
                    print(f"\033[1m\033[1;33mDone: {dd} ({i}/{len(d)})\033[0m")
                    i+=1
            cleanup(k)
            print(f"REMOVED: {d} FROM {k}")
        else:
            print("Aborted...")
    except:
        print(f"\033[1m\033[0;31mError removing binary: {e}\033[0m")

try:
    if(sys.argv[1] == "-Si"):
        try:
            install_package(sys.argv[2])
        except:
            print(f"\033[1m\033[0;31mUSAGE: {sys.argv[0]} [-Si -Sr -Gg] <package>.evp\033[0m")
    elif(sys.argv[1] == "-Sr"):
        try:
            remove_package(sys.argv[2])
        except:
            print(f"\033[1m\033[0;31mUSAGE: {sys.argv[0]} [-Si -Sr -Gg] <package>.evp\033[0m")
    elif(sys.argv[1] == "-Gg"):
        try:
            print(f"\033[1m\033[1;33mGetting File {sys.argv[2]}\033[0m")
            os.system(f"wget https://github.com/LowLevelCodingCH/EvolvePackages/raw/main/{sys.argv[2]} > /dev/null")
        except:
            print(f"\033[1m\033[0;31mUSAGE: {sys.argv[0]} [-Si -Sr -Gg] <package>.evp\033[0m")
    else:
        print(f"\033[1m\033[0;31mUSAGE: {sys.argv[0]} [-Si -Sr -Gg] <package>.evp\033[0m")
except:
    print(f"\033[1m\033[0;31mUSAGE: {sys.argv[0]} [-Si -Sr -Gg] <package>.evp\033[0m")

